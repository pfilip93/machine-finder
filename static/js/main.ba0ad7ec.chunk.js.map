{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CloseIcon","xmlns","viewBox","width","height","d","fill","App","React","useState","open","setOpen","name","setName","data","setData","list","setList","loading","setLoading","error","setError","fetchData","a","fetch","res","json","useEffect","phrase","toLowerCase","trim","products","length","map","group","filter","prod","words","split","valid","i","indexOf","item","getProducts","className","onClick","aria-label","type","placeholder","value","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba0ad7ec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\n\nconst CloseIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    height=\"1em\"\n  >\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n  </svg>\n);\n\nexport default function App() {\n  const [open, setOpen] = React.useState(false);\n  const [name, setName] = React.useState(\"\");\n  const [data, setData] = React.useState(null);\n  const [list, setList] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  async function fetchData() {\n    try {\n      const res = await fetch(\"data.json\");\n      const json = await res.json();\n\n      return json;\n    } catch (e) {\n      setError(\"Failed to fetch\");\n    }\n  }\n\n  React.useEffect(() => {\n    if (name) {\n      setError(null);\n      setLoading(true);\n\n      const getProducts = (phrase) => {\n        const arr = data\n          .map((group) => {\n            const products = group.products.filter((prod) => {\n              const name = prod.name.toLowerCase();\n              const words = phrase.split(\" \");\n\n              let valid = true;\n\n              for (let i = 0; i < words.length; i++) {\n                if (name.indexOf(words[i]) === -1) {\n                  valid = false;\n                  break;\n                }\n              }\n\n              return valid;\n            });\n\n            return products.length\n              ? {\n                  ...group,\n                  products,\n                }\n              : null;\n          })\n          .filter((item) => item);\n\n        return arr;\n      };\n\n      if (data) {\n        const phrase = name.toLowerCase().trim();\n        const products = phrase.length ? getProducts(phrase) : [];\n\n        setList(products);\n      } else {\n        (async () => {\n          setData(await fetchData());\n        })();\n      }\n\n      setLoading(false);\n    }\n  }, [name, data]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>klickrent</h1>\n      </header>\n      <main>\n        <button onClick={() => setOpen(true)}>Start inquiry</button>\n      </main>\n\n      {open && (\n        <div className=\"modal\">\n          <div className=\"topBar\">\n            <h2>Direct request</h2>\n            <button\n              className=\"close\"\n              aria-label=\"Close\"\n              onClick={() => setOpen(false)}\n            >\n              <CloseIcon />\n            </button>\n          </div>\n\n          <input\n            className=\"name\"\n            type=\"text\"\n            placeholder=\"Machine name\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          {loading ? (\n            <h3 className=\"message\">Loading....</h3>\n          ) : (\n            <>\n              {error ? (\n                <h3 className=\"message\">{error}</h3>\n              ) : (\n                !!name && (\n                  <>\n                    {!list.length && (\n                      <h3 className=\"message\">No results....</h3>\n                    )}\n\n                    <div className=\"list\">\n                      {list.map((group) => (\n                        <div key={group.name}>\n                          <h3>{group.name}</h3>\n                          <ul>\n                            {group.products.map((prod) => (\n                              <li key={prod.name}>{prod.name}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      ))}\n                    </div>\n                  </>\n                )\n              )}\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}